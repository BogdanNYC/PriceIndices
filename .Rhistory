library("readxl")
data<-read_excel(path="2_Dane_2009.xlsx")
head(data)
kolumny<-c(2,4,5)
wiersze<-c(1,2,3)
data<-data[-wiersze,]
library("readxl")
data<-read_excel(path="2_Dane_2009.xlsx")
head(data)
kolumny<-c(2,4,5)
wiersze<-c(1,2,3)
data<-data[-wiersze,]
data
library("readxl")
data<-read_excel(path="2_Dane_2009.xlsx")
head(data)
kolumny<-c(2,4,5)
wiersze<-c(1,2,3)
data<-data[-wiersze,]
data$kolumny<-NULL
data
library("readxl")
data<-read_excel(path="2_Dane_2009.xlsx")
head(data)
kolumny<-c(2,4,5)
wiersze<-c(1,2,3)
data<-data[-wiersze,-kolumny]
data
library("readxl")
data<-read_excel(path="2_Dane_2009.xlsx")
data$Case<-NULL
head(data)
kolumny<-c(2,4,5)
wiersze<-c(1,2,3)
data<-data[-wiersze,-kolumny]
data
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("lattice")
auta<-read.table("http://www.biecek.pl/R/auta.csv",sep=";",header=TRUE)
head(auta)
library("dplyr")
library("lattice")
auta<-read.table("http://www.biecek.pl/R/auta.csv",sep=";",header=TRUE)
redukcja<-filter(auta, Model==c("Peugot","Corsa"))
#tworzymy wykres rozrzutu dla Ceny w zaleznosci od Przebiegu dla 2 modeli: Peugot i Corsa. Rysowane sa punkty (parametr p) oraz dodatkowo linia regresji (parametr r). Dodano linie siatki (g)
xyplot(redukcja$Cena~redukcja$Przebieg|redukcja$Model,type=c("p","r","g"),col="grey",pch=7,xlab="przebieg",ylab="cena")
library("dplyr")
library("lattice")
auta<-read.table("http://www.biecek.pl/R/auta.csv",sep=";",header=TRUE)
redukcja<-filter(auta, Model==c("Astra","Corsa"))
#tworzymy wykres rozrzutu dla Ceny w zaleznosci od Przebiegu dla 2 modeli: Peugot i Corsa. Rysowane sa punkty (parametr p) oraz dodatkowo linia regresji (parametr r). Dodano linie siatki (g)
xyplot(redukcja$Cena~redukcja$Przebieg|redukcja$Model,type=c("p","r","g"),col="grey",pch=7,xlab="przebieg",ylab="cena")
histogram(~auta$Przebieg/1000|auta$Marka,xlab="przebieg [tys.km]")
#Mechanizm grupowania i warunkowania moze byc laczony na wspolnym wykresie. Mozemy dodawac legende
densityplot(~auta$Przebieg/1000|auta$Marka,group=auta$Paliwo,xlab="przebieg [tys.km]",auto.key=TRUE)
#Mozemy kontrolowac tez polozenie i zawartosc legendy
densityplot(~auta$Przebieg/1000|auta$Marka,group=auta$Paliwo,xlab="przebieg",auto.key=list(space="right"))
#Funkcja cloud() to trojwymiarowa wersja wykresu kropkowego xyplot()
tylkoAstraCorsa<-filter(auta, Model==c("Astra","Corsa"))
cloud(tylkoAstraCorsa$Cena/1000~tylkoAstraCorsa$Przebieg/1000+tylkoAstraCorsa$KM|tylkoAstraCorsa$Model,xlab="przebieg",ylab="KM",zlab="cena",col="green",drape=TRUE)
#Umieszczanie wiele wykresow w jednym i pozycjonowanie wykresow - funkcja split (w ktorej kolumnie wykres, w ktorym wierszy wykres, ile kolumn ma byc, ile wierszy ma byc) przy czym rysowanie zaczyna sie od lewej (newpage zapewnia ze wykresy sie nie nakladaja)
tylkoAstra<-filter(auta, Model==c("Astra"))
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000,xlab="przebieg [tys km]",ylab="cena [tys PLN]",main="wykres 1")
wykres2<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$KM,xlab="KM",ylab="cena [tys PLN]",main="wykres 2")
wykres3<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Produkcja,xlab="produkcja [rok]",ylab="cena [tys PLN]",main="wykres 3")
plot(wykres1,split=c(1,1,2,1))
plot(wykres2,split=c(2,1,2,2),newpage=FALSE)
plot(wykres3,split=c(2,2,2,2),newpage=FALSE)
#nowy zbior danych - iris - klasyfikacja po kolorach
my_data <- iris
head(my_data)
#nowy zbior danych - iris - klasyfikacja po kolorach
my_data <- iris
#head(my_data)
xyplot(Sepal.Length ~ Petal.Length, group = Species,
data = my_data, auto.key = TRUE)
#nowy zbior danych - iris - klasyfikacja po kolorach
my_data <- iris
#head(my_data)
#wskazujemy na zbior danych i potem operujemy tylko na nazwach kolumn
xyplot(Sepal.Length ~ Petal.Length, group = Species,
data = my_data, auto.key = TRUE)
#Aproksymacja regresją niekoniecznie liniową
xyplot(Sepal.Length ~ Petal.Length | Species,
group = Species, data = my_data,
type = c("p", "smooth"),
scales = "free")
#Aproksymacja regresją niekoniecznie liniową
xyplot(Sepal.Length ~ Petal.Length | Species,
group = Species, data = my_data,
type = c("p", "smooth"),
scales = "free")
#Aproksymacja regresją niekoniecznie liniową
xyplot(Sepal.Length ~ Petal.Length | Species,
group = Species, data = iris,
type = c("p", "smooth"),
scales = "free")
#Aproksymacja regresją niekoniecznie liniową
xyplot(Sepal.Length ~ Petal.Length | Species,
group = Species, data = my_data,
type = c("p", "smooth"),
scales = "free")
#wykresy pudelkowe
bwplot(Sepal.Length ~ Petal.Length | Species)
#wykresy pudelkowe
bwplot(Sepal.Length ~ Petal.Length | Species,data=iris)
#wykresy pudelkowe
bwplot(Sepal.Length  | Species,data=iris)
#wykresy pudelkowe
bwplot(~Sepal.Length  | Species,data=iris)
#wykresy pudelkowe
bwplot(~petal.Length  | Species,data=iris)
#wykresy pudelkowe
bwplot(~Petal.Length  | Species,data=iris)
#wykresy pudelkowe (dla długosci platka)
bwplot(~Petal.Length  | Species,data=iris, xlab="dlogosc płatka")
#wykresy pudelkowe (dla długosci platka)
bwplot(~Petal.Length  | Species,data=iris, xlab="długość płatka")
#wykresy pudelkowe (dla długosci platka)
bwplot(~Petal.Length  | Species,data=iris, xlab="długość płatka")
bwplot(~Petal.Length  | Species,data=iris, xlab="długość płatka", panel = panel.violin)
#wykresy kolowe
head(iris)
#wykresy kolowe
pie(iris$Species, labels = iris$Species, radius = 1)
#wykresy kolowe
head(iris)
pie(iris$Species, labels = iris$Species, radius = 1)
#wykresy kolowe
head(iris)
pie(iris$Petal.Length, labels = iris$Species, radius = 1)
#wykresy kolowe
head(iris)
pie(mean(iris$Petal.Length), labels = iris$Species, radius = 1)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-arrange(iris$Petal.Length, by=list(iris$Species))
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
library(dplyr)
moje_dane<-arrange(iris$Petal.Length, by=list(iris$Species))
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-arrange(iris$Petal.Length, by=list(iris$Species), mean)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-arrange(iris$Petal.Length, by=list(iris$Species), FUN=mean)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
head(moje_dane)
#pie(mean(iris$Petal.Length), labels = iris$Species, radius = 1)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
#pie(mean(iris$Petal.Length), labels = iris$Species, radius = 1)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
#head(moje_dane)
pie(mean(moje_dane$dl.platka), labels = moje_dane$rodzaj, radius = 1)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
pie(mean(moje_dane$dl.platka), labels = moje_dane$rodzaj, radius = 1)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
pie(mean(moje_dane$dl.platka), labels = moje_dane$rodzaj)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
pie(moje_dane$dl.platka, labels = moje_dane$rodzaj)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
pie(moje_dane$dl.platka, labels = moje_dane$rodzaj, col=c("yellow", "grey", "red"))
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
#tworzymy wykres kolowy i zapisujemy do pliku
jpg("wykres.jpg")
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
#tworzymy wykres kolowy i zapisujemy do pliku
jpeg("wykres.jpg")
pie(moje_dane$dl.platka, labels = moje_dane$rodzaj, col=c("yellow", "grey", "red"))
dev.off()
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
#tworzymy wykres kolowy i zapisujemy do pliku
jpeg("wykres.jpg")  #pdf("wykres.pdf") - tak samo png
pie(moje_dane$dl.platka, labels = moje_dane$rodzaj, col=c("yellow", "grey", "red"))
dev.off()
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
#tworzymy wykres kolowy i zapisujemy do pliku
jpeg("wykres.jpg")  #pdf("wykres.pdf") - tak samo png
rys<-pie(moje_dane$dl.platka, labels = moje_dane$rodzaj, col=c("yellow", "grey", "red"))
dev.off()
rys
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
#tworzymy wykres kolowy i zapisujemy do pliku
jpeg("wykres.jpg")  #pdf("wykres.pdf") - tak samo png
rys<-pie(moje_dane$dl.platka, labels = moje_dane$rodzaj, col=c("yellow", "grey", "red"))
dev.off()
print(rys)
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
#tworzymy wykres kolowy i zapisujemy do pliku
jpeg("wykres.jpg")  #pdf("wykres.pdf") - tak samo png
pie(moje_dane$dl.platka, labels = moje_dane$rodzaj, col=c("yellow", "grey", "red"))
dev.off()
#wykresy kolowe
#tworzymy znior danych: rodzaj irisa vs srednia dlogosc platka
moje_dane<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_dane)<-c("rodzaj", "dl.platka")
head(moje_dane)
#tworzymy wykres kolowy i zapisujemy do pliku
jpeg("wykres.jpg")  #pdf("wykres.pdf") - tak samo png
pie(moje_dane$dl.platka, labels = moje_dane$rodzaj, col=c("yellow", "grey", "red"))
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library("lattice")
library(dplyr)
library("lattice")
library(dplyr)
library("lattice")
auta<-read.table("http://www.biecek.pl/R/auta.csv",sep=";",header=TRUE)
head(auta)
library(dplyr)
library("lattice")
auta<-read.table("http://www.biecek.pl/R/auta.csv",sep=";",header=TRUE)
redukcja<-dplyr::filter(auta, Model==c("Astra", "Corsa"))
#tworzymy wykres rozrzutu dla Ceny w zależności od Przebiegu dla 2 modeli: Astra, Corsa. Rysowane sa punkty (paramter p), linia regresji (r), linie siatki (g)
xyplot(reduckja$Cena~redukcja$Przebieg|redukcja$Model,type=c("p","r", "g"), col="grey", pch=7,xlab="przebieg", ylab="cena")
library(dplyr)
library("lattice")
auta<-read.table("http://www.biecek.pl/R/auta.csv",sep=";",header=TRUE)
redukcja<-dplyr::filter(auta, Model==c("Astra", "Corsa"))
#tworzymy wykres rozrzutu dla Ceny w zależności od Przebiegu dla 2 modeli: Astra, Corsa. Rysowane sa punkty (paramter p), linia regresji (r), linie siatki (g)
xyplot(redukcja$Cena~redukcja$Przebieg|redukcja$Model,type=c("p","r", "g"), col="grey", pch=7,xlab="przebieg", ylab="cena")
library(dplyr)
library("lattice")
auta<-read.table("http://www.biecek.pl/R/auta.csv",sep=";",header=TRUE)
redukcja<-dplyr::filter(auta, Model==c("Astra", "Corsa"))
#tworzymy wykres rozrzutu dla Ceny w zależności od Przebiegu dla 2 modeli: Astra, Corsa. Rysowane sa punkty (paramter p), linia regresji (r), linie siatki (g)
xyplot(redukcja$Cena~redukcja$Przebieg|redukcja$Model,type=c("p","r", "g"), col="grey", pch=7,xlab="przebieg", ylab="cena")
histogram(~auta$Przebieg/1000|auta$Marka, xlab="przebieg [tys km]")
#Mechanizm grupowania i warunkowania moze byc laczony na wspolnym wykresie +mozemy dodawac tez jednoczesnie legende
densityplot(~auta$Przebieg/1000|auta$Marka, group=auta$Paliwo, xlab="przebieg", ylab="wartosc", auto.key=TRUE)
#Mechanizm grupowania i warunkowania moze byc laczony na wspolnym wykresie +mozemy dodawac tez jednoczesnie legende
densityplot(~auta$Przebieg/1000|auta$Marka, group=auta$Paliwo, xlab="przebieg", ylab="wartosc", auto.key=list(space="right"))
#funckcja 'cloud' to trojwymiarowa wersja wykresu xyplo
redukcja<-dplyr::filter(auta, Model==c("Astra", "Corsa"))
cloud(redukcja$Cena/1000~redukcja$Przebieg/1000+redukcja$KM, xlab="przebieg [tys km]", ylab="KM", zlab="cena [tys PLN]", col="green")
#funckcja 'cloud' to trojwymiarowa wersja wykresu xyplo
redukcja<-dplyr::filter(auta, Model==c("Astra", "Corsa"))
cloud(redukcja$Cena/1000~redukcja$Przebieg/1000+redukcja$KM, xlab="przebieg [tys km]", ylab="KM", zlab="cena [tys PLN]", col="green", drape=TRUE)
#funckcja 'cloud' to trojwymiarowa wersja wykresu xyplo
redukcja<-dplyr::filter(auta, Model==c("Astra", "Corsa"))
cloud(redukcja$Cena/1000~redukcja$Przebieg/1000+redukcja$KM, xlab="przebieg [tys km]", ylab="KM", zlab="cena", col="green", drape=TRUE)
tylkoAstra<-dplyr::filter(auta, Model==c("Astra"))
#tworzymy 3 niezalezne wykresy
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000, xlab="przebieg", ylab="cena [tys PLN]", main="wykres 1")
wykres1
tylkoAstra<-dplyr::filter(auta, Model==c("Astra"))
#tworzymy 3 niezalezne wykresy
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000, xlab="przebieg [tys KM]", ylab="cena [tys PLN]", main="wykres 1")
wykres1
tylkoAstra<-dplyr::filter(auta, Model==c("Astra"))
#tworzymy 3 niezalezne wykresy
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000, xlab="przebieg [tys KM]", ylab="cena [tys PLN]", main="wykres 1")
wykres2<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$KM, xlab="KM", ylab="cena [tys PLN]", main="wykres 2")
wykres2
tylkoAstra<-dplyr::filter(auta, Model==c("Astra"))
#tworzymy 3 niezalezne wykresy
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000, xlab="przebieg [tys KM]", ylab="cena [tys PLN]", main="wykres 1")
wykres2<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$KM, xlab="KM", ylab="cena [tys PLN]", main="wykres 2")
wykres3<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Produkcja, xlab="produkcja", ylab="cena [tys PLN]", main="wykres 3")
wykres
tylkoAstra<-dplyr::filter(auta, Model==c("Astra"))
#tworzymy 3 niezalezne wykresy
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000, xlab="przebieg [tys KM]", ylab="cena [tys PLN]", main="wykres 1")
wykres2<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$KM, xlab="KM", ylab="cena [tys PLN]", main="wykres 2")
wykres3<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Produkcja, xlab="produkcja", ylab="cena [tys PLN]", main="wykres 3")
wykres3
tylkoAstra<-dplyr::filter(auta, Model==c("Astra"))
#tworzymy 3 niezalezne wykresy
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000, xlab="przebieg [tys KM]", ylab="cena [tys PLN]", main="wykres 1")
wykres2<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$KM, xlab="KM", ylab="cena [tys PLN]", main="wykres 2")
wykres3<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Produkcja, xlab="produkcja", ylab="cena [tys PLN]", main="wykres 3")
#wykres panelowy
plot(wykres1)
tylkoAstra<-dplyr::filter(auta, Model==c("Astra"))
#tworzymy 3 niezalezne wykresy
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000, xlab="przebieg [tys KM]", ylab="cena [tys PLN]", main="wykres 1")
wykres2<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$KM, xlab="KM", ylab="cena [tys PLN]", main="wykres 2")
wykres3<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Produkcja, xlab="produkcja", ylab="cena [tys PLN]", main="wykres 3")
#wykres panelowy
plot(wykres1, split=c(1,1,2,1)) # 1 - pozycja 1 kolumna 2- pozycja 1 wiersz 3 - docelowo 2 kolumn 4 - docelowo 1 wiersz
plot(wykres2,split=c(2,1,2,2), newpage=FALSE)
plot(wykres3,split=c(2,2,2,2))
tylkoAstra<-dplyr::filter(auta, Model==c("Astra"))
#tworzymy 3 niezalezne wykresy
wykres1<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Przebieg/1000, xlab="przebieg [tys KM]", ylab="cena [tys PLN]", main="wykres 1")
wykres2<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$KM, xlab="KM", ylab="cena [tys PLN]", main="wykres 2")
wykres3<-xyplot(tylkoAstra$Cena/1000~tylkoAstra$Produkcja, xlab="produkcja", ylab="cena [tys PLN]", main="wykres 3")
#wykres panelowy
plot(wykres1, split=c(1,1,2,1)) # 1 - pozycja 1 kolumna 2- pozycja 1 wiersz 3 - docelowo 2 kolumn 4 - docelowo 1 wiersz
plot(wykres2,split=c(2,1,2,2), newpage=FALSE)
plot(wykres3,split=c(2,2,2,2),newpage=FALSE)
moje_dane<-iris
head(iris)
moje_dane<-iris
head(iris)
nrow(iris)
moje_dane<-iris
head(iris)
moje_dane<-iris
head(iris)
unique(iris$Species)
moje_dane<-iris
head(iris)
moje_dane<-iris
head(iris)
xyplot(iris$Sepal.Length~iris$Petal.Length, group=iris$Species, auto.key=TRUE)
moje_dane<-iris
head(iris)
xyplot(Sepal.Length~Petal.Length, group=Species, data=iris, auto.key=TRUE)
moje_dane<-iris
head(iris)
xyplot(Sepal.Length~Petal.Length, group=Species, data=iris, auto.key=TRUE, type=c("smooth"))
moje_dane<-iris
head(iris)
xyplot(Sepal.Length~Petal.Length, group=Species, data=iris, auto.key=TRUE, type=c("p","smooth"))
moje_dane<-iris
head(iris)
xyplot(Sepal.Length~Petal.Length, group=Species, data=iris, auto.key=TRUE, type=c("p","smooth"))
moje_dane<-iris
head(iris)
xyplot(Sepal.Length~Petal.Length, group=Species, data=iris, auto.key=TRUE, type=c("p","smooth"))
xyplot(Sepal.Length~Petal.Length|Species, data=iris, auto.key=TRUE, type=c("p","smooth"))
# polecenie 'bwplot' do rysowania roznych wariantow wykresow pudelkowych
bwplot(~Petal.Length|Species, data=iris, xlab="dlugosc płatka")
# polecenie 'bwplot' do rysowania roznych wariantow wykresow pudelkowych
bwplot(~Petal.Length|Species, data=iris, xlab="dlugosc płatka", panel=panel.violin)
# polecenie 'bwplot' do rysowania roznych wariantow wykresow pudelkowych
bwplot(~Petal.Length|Species, data=iris, xlab="dlugosc płatka", panel=panel.violin)
moje_irysy<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
head(moje_irysy)
moje_irysy<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_iryse)<-c("gatunek", "Dług.płatka")
moje_irysy<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_irysy)<-c("gatunek", "Dług.płatka")
head(moje_irysy)
moje_irysy<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_irysy)<-c("gatunek", "Dług.płatka")
pie(moje_irysy$Dług.płatka, labels=irysy$gatunek)
moje_irysy<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_irysy)<-c("gatunek", "Dług.płatka")
pie(moje_irysy$Dług.płatka, labels=moje_irysy$gatunek)
moje_irysy<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_irysy)<-c("gatunek", "Dług.płatka")
pie(moje_irysy$Dług.płatka, labels=moje_irysy$gatunek, col=c("yellow", "grey", "red"))
moje_irysy<-aggregate(iris$Petal.Length, by=list(iris$Species), FUN=mean)
colnames(moje_irysy)<-c("gatunek", "Dług.płatka")
jpeg("wykres.jpg")
pie(moje_irysy$Dług.płatka, labels=moje_irysy$gatunek, col=c("yellow", "grey", "red"))
dev.off()
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library("PriceIndices")
jevons(milk, start="2018-12", end="2019-12")
library("PriceIndices")
jevons(milk, start="2018-12", end="2019-12")
library("PriceIndices")
tpd(milk, start="2018-12", end="2019-12")
library("PriceIndices")
gk_splice(milk, start="2018-12", end="2020-01")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="Priceindices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="Priceindices")
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
dpcument()
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
document()
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(debtools)
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(PriceIndices)
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library("PriceIndices")
fisher(milk, start="2019-12",end="2020-02")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="Priceindices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
library(devtools)
document()
build(path="PriceIndices")
install(path="PriceIndices")
